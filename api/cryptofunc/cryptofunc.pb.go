// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: cryptofunc.proto

package binacs_api_cryptofunc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Encrypt
type EncryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *EncryptReq) Reset() {
	*x = EncryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptofunc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptReq) ProtoMessage() {}

func (x *EncryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_cryptofunc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptReq.ProtoReflect.Descriptor instead.
func (*EncryptReq) Descriptor() ([]byte, []int) {
	return file_cryptofunc_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptReq) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type EncryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res string `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *EncryptResp) Reset() {
	*x = EncryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptofunc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptResp) ProtoMessage() {}

func (x *EncryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_cryptofunc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptResp.ProtoReflect.Descriptor instead.
func (*EncryptResp) Descriptor() ([]byte, []int) {
	return file_cryptofunc_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptResp) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

// Decrypt
type DecryptReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *DecryptReq) Reset() {
	*x = DecryptReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptofunc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptReq) ProtoMessage() {}

func (x *DecryptReq) ProtoReflect() protoreflect.Message {
	mi := &file_cryptofunc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptReq.ProtoReflect.Descriptor instead.
func (*DecryptReq) Descriptor() ([]byte, []int) {
	return file_cryptofunc_proto_rawDescGZIP(), []int{2}
}

func (x *DecryptReq) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

type DecryptResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res string `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *DecryptResp) Reset() {
	*x = DecryptResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptofunc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResp) ProtoMessage() {}

func (x *DecryptResp) ProtoReflect() protoreflect.Message {
	mi := &file_cryptofunc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResp.ProtoReflect.Descriptor instead.
func (*DecryptResp) Descriptor() ([]byte, []int) {
	return file_cryptofunc_proto_rawDescGZIP(), []int{3}
}

func (x *DecryptResp) GetRes() string {
	if x != nil {
		return x.Res
	}
	return ""
}

var File_cryptofunc_proto protoreflect.FileDescriptor

var file_cryptofunc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x62, 0x69, 0x6e, 0x61, 0x63, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x63, 0x22, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x1f, 0x0a, 0x0b, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x1f, 0x0a, 0x0b, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x73, 0x32, 0xb0, 0x01, 0x0a, 0x0a,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x50, 0x0a, 0x07, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x63, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x63, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x63,
	0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x63,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x07,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x63, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75, 0x6e, 0x63, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x63, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x66, 0x75,
	0x6e, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cryptofunc_proto_rawDescOnce sync.Once
	file_cryptofunc_proto_rawDescData = file_cryptofunc_proto_rawDesc
)

func file_cryptofunc_proto_rawDescGZIP() []byte {
	file_cryptofunc_proto_rawDescOnce.Do(func() {
		file_cryptofunc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cryptofunc_proto_rawDescData)
	})
	return file_cryptofunc_proto_rawDescData
}

var file_cryptofunc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cryptofunc_proto_goTypes = []interface{}{
	(*EncryptReq)(nil),  // 0: binacs_api_cryptofunc.EncryptReq
	(*EncryptResp)(nil), // 1: binacs_api_cryptofunc.EncryptResp
	(*DecryptReq)(nil),  // 2: binacs_api_cryptofunc.DecryptReq
	(*DecryptResp)(nil), // 3: binacs_api_cryptofunc.DecryptResp
}
var file_cryptofunc_proto_depIdxs = []int32{
	0, // 0: binacs_api_cryptofunc.CryptoFunc.Encrypt:input_type -> binacs_api_cryptofunc.EncryptReq
	2, // 1: binacs_api_cryptofunc.CryptoFunc.Decrypt:input_type -> binacs_api_cryptofunc.DecryptReq
	1, // 2: binacs_api_cryptofunc.CryptoFunc.Encrypt:output_type -> binacs_api_cryptofunc.EncryptResp
	3, // 3: binacs_api_cryptofunc.CryptoFunc.Decrypt:output_type -> binacs_api_cryptofunc.DecryptResp
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cryptofunc_proto_init() }
func file_cryptofunc_proto_init() {
	if File_cryptofunc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cryptofunc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptofunc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptofunc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptofunc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cryptofunc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cryptofunc_proto_goTypes,
		DependencyIndexes: file_cryptofunc_proto_depIdxs,
		MessageInfos:      file_cryptofunc_proto_msgTypes,
	}.Build()
	File_cryptofunc_proto = out.File
	file_cryptofunc_proto_rawDesc = nil
	file_cryptofunc_proto_goTypes = nil
	file_cryptofunc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CryptoFuncClient is the client API for CryptoFunc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoFuncClient interface {
	Encrypt(ctx context.Context, in *EncryptReq, opts ...grpc.CallOption) (*EncryptResp, error)
	Decrypt(ctx context.Context, in *DecryptReq, opts ...grpc.CallOption) (*DecryptResp, error)
}

type cryptoFuncClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoFuncClient(cc grpc.ClientConnInterface) CryptoFuncClient {
	return &cryptoFuncClient{cc}
}

func (c *cryptoFuncClient) Encrypt(ctx context.Context, in *EncryptReq, opts ...grpc.CallOption) (*EncryptResp, error) {
	out := new(EncryptResp)
	err := c.cc.Invoke(ctx, "/binacs_api_cryptofunc.CryptoFunc/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptoFuncClient) Decrypt(ctx context.Context, in *DecryptReq, opts ...grpc.CallOption) (*DecryptResp, error) {
	out := new(DecryptResp)
	err := c.cc.Invoke(ctx, "/binacs_api_cryptofunc.CryptoFunc/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoFuncServer is the server API for CryptoFunc service.
type CryptoFuncServer interface {
	Encrypt(context.Context, *EncryptReq) (*EncryptResp, error)
	Decrypt(context.Context, *DecryptReq) (*DecryptResp, error)
}

// UnimplementedCryptoFuncServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoFuncServer struct {
}

func (*UnimplementedCryptoFuncServer) Encrypt(context.Context, *EncryptReq) (*EncryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedCryptoFuncServer) Decrypt(context.Context, *DecryptReq) (*DecryptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}

func RegisterCryptoFuncServer(s *grpc.Server, srv CryptoFuncServer) {
	s.RegisterService(&_CryptoFunc_serviceDesc, srv)
}

func _CryptoFunc_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoFuncServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binacs_api_cryptofunc.CryptoFunc/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoFuncServer).Encrypt(ctx, req.(*EncryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptoFunc_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoFuncServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binacs_api_cryptofunc.CryptoFunc/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoFuncServer).Decrypt(ctx, req.(*DecryptReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CryptoFunc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binacs_api_cryptofunc.CryptoFunc",
	HandlerType: (*CryptoFuncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encrypt",
			Handler:    _CryptoFunc_Encrypt_Handler,
		},
		{
			MethodName: "Decrypt",
			Handler:    _CryptoFunc_Decrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cryptofunc.proto",
}
